// Заменить до правильной скобочной последовательности

// Вам задана строка s, состоящая из открывающих и закрывающих скобок четырех
// видов <>, {}, [], (). Все скобки делятся на два типа: открывающие и
// закрывающие. Разрешается заменить любую скобку на любую другую такого же
// типа. Например, скобку < можно заменить на скобку {, но нельзя заменить на
// скобку ) или >.

// Далее приводится стандартное определение правильной скобочной
// последовательности, с которым вы возможно уже знакомы.

// Определим правильную скобочную последовательность. Пустая строка считается
// таковой. Пусть строки s1 и s2 являются правильными скобочными
// последовательностями, тогда строки <s1>s2, {s1}s2, [s1]s2, (s1)s2 также
// являются правильными скобочными последовательностями.

// Например, строка "[[(){}]<>]" является правильной скобочной
// последовательностью, а строки "[)()" и "][()()" — нет.

// Определите наименьшее количество замен, необходимое для того, чтобы сделать
// строку s правильной скобочной последовательностью.

// Входные данные
// Единственная строка содержит непустую строку s, состоящую только из
// открывающих и закрывающих скобок, заданных четырех видов. Длина строки s не
// превосходит 10^6.

// Выходные данные
// Если получить правильную скобочную последовательность из строки s невозможно
// выведите слово Impossible.

// Иначе выведите наименьшее количество замен, необходимое для получения
// правильной скобочной последовательности из строки s.

#include <bits/stdc++.h>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

int main() {
  string s;
  cin >> s;

  stack<char> stack;
  int counter = 0;

  for (char c : s) {
    if (c == '(' || c == '{' || c == '<' || c == '[') {
      stack.push(c);
    } else {
      if (stack.empty()) {
        cout << "Impossible" << endl;
        return 0;
      }

      char top = stack.top();
      stack.pop();

      if ((top == '(' && c != ')') || (top == '[' && c != ']') ||
          (top == '{' && c != '}') || (top == '<' && c != '>')) {
        counter++;
      }
    }
  }

  if (!stack.empty()) {
    cout << "Impossible" << endl;
    return 0;
  }

  cout << counter << endl;

  return 0;
}
