Эссе 2, тема - доклад Threads...многобукаф

# Эссе 1
В работе Эдварда А. Ли "Проблема с потоками" рассматривается один из ключевых аспектов современного программирования — использование потоков для реализации параллельных вычислений. Автор утверждает, что, несмотря на кажущуюся простоту и удобство потоков, они вносят в программирование значительные сложности. Основная проблема заключается в том, что потоки нарушают основные принципы последовательного вычисления, такие как понятность, предсказуемость и детерминированность. Вместо того чтобы рассматривать потоки как небольшое расширение последовательного программирования, Ли предлагает смотреть на них как на кардинальное изменение, влекущее за собой потерю контроля над выполнением программы. Вместо удаления недетерминизма, автор предлагает строить программы, исходя из детерминированных и компонуемых компонентов, явно вводя недетерминизм только там, где это действительно необходимо.

Лично мне кажется, что Ли поднимает крайне важный вопрос в контексте развития компьютерных технологий и многозадачности. С одной стороны, стремление к повышению эффективности и производительности за счет параллельных вычислений и многоядерности процессоров неоспоримо. С другой стороны, необходимо осознавать цену, которую приходится платить за эти преимущества, в форме увеличения сложности программ и вероятности ошибок. Важность детерминизма и предсказуемости программ не должна уступать перед лицом стремления к технологическому прогрессу. Сложно не согласиться с тем, что нужно искать новые пути развития конкурентного программирования, которые позволили бы сохранить преимущества параллельных вычислений без потери в понимании и контроле над программами.

Рассуждая о проблеме, поднятой Ли, нельзя не задуматься о том, насколько мы готовы жертвовать удобством и простотой ради достижения высокой производительности. Мне представляется, что будущее за разработкой новых языков программирования и моделей вычислений, которые смогут предложить более сбалансированный подход к решению задач параллельного программирования. Это требует не только технических инноваций, но и изменения в образе мышления разработчиков, которым придется отказаться от привычных парадигм в пользу новых, более сложных, но и более эффективных в долгосрочной перспективе.
-------------------------
Ревью
Место 3
Автору эссе удалось изложить основные идеи доклада, однако, как мне показалось, тут внимание было сфокусировано лишь на одном тезисе, а не статье в целом.. 2 абзац больше походит на рассуждения, чем на оценку идей - как будто он перепутан. Автор не достаточно раскрывает идеи Эдварда Ли, их оценки так же не очень хватает. 3 абзац написан хорошо и по делу, рассуждения понятны и логичны, хоть и обьем их довольно скромный. В целом эссе написано неплохо, структура достаточно логична, но как будто бы оно сыровато.


# Эссе 2
В представленном тексте (2006 год) Эдвард Ли дает критическую оценку использованию потоков в программировании. Он отмечает, что потоки были созданы как адаптация систем последовательных вычислений для работы с конкурентными моделями. Несмотря на широкую поддержку потоков в языках программирования, профессор Ли считает, что этот подход далек от идеала, потому что он нарушает принципы простоты и определенности –краеугольные камни последовательного программирования. Автор считает неоправданными усилия по борьбе с неопределенностями, вызванными моделью потоков, и предлагает новый подход – координационные языки. Эти языки, скорее всего, базируясь на каких-то уже существующих языках, будут предлагать новые абстракции, освобождающие программистов от страданий, вызванных прямой работой с потоками.

Тема параллельного программирования в наше время крайне актуальна, ведь именно параллельные вычисления сегодня производят самые востребованные продукты от мира IT – трехмерную графику, модели искусственного интеллекта, блокчейн, анализ больших данных и т. д. Эдвард Ли был прав, говоря 20 лет назад про то, что закон Мура в конечном счете перестанет работать, что также подтолкнет параллелизм в своем развитии. То же самое касается «координационного» подхода, апологетом которого Ли выступал, ведь, как мы можем заметить, во многих популярных языках с того времени появились разные высокоуровневые надстройки в виде абстракций для более очевидной работы с параллелизмом. Однако здесь у меня появляются вопросы.

Профессор Ли видел проблемы в модели потоков и даже отмечал, что она идет вразрез с окружающим нас, крайне «конкурентным» физическим миром. Тем не менее лучшей идеей, которую он смог предложить, стало построение новых абстракций поверх это модели? Соглашусь, это решение побороло одну из проблем, про которые говорил автор – оно избавило программистов от ректальной боли, вызванной прямой работой с потоками. Но ведь принципиальную проблему потоков этот подход не решил. Потоки как были, так и остаются моделью, которая лишь имитирует параллелизм. В материале прошлого эссе Брет Виктор озвучивал идею о большом количестве мелких процессоров, общающихся между собой – вот это больше похоже на решение. Принципиально новые архитектуры, такие как квантовые или нейроморфные процессоры (к тому моменту идеи уже хорошо известны) автором даже не были озвучены. Неудивительно, что самые передовые отрасли вычислений, озвученные мною выше, зачастую выполняются на GPU картах, которые используют совсем другие подходы, в частности тот, который упоминал Брет Виктор. Потоки и локи (в традиционном их CPU понимании) здесь абсолютно неконкурентоспособны (no pun intended). Я считаю, что статья, которая называется «The problem with threads» проигнорировала как раз основную проблему потоков, однако такое впечатление сложилось лично у меня с моими, возможно, скудными познаниями, поэтому я конечно могу быть где-то неправ…
-------------------------
Ревью
Место 2
Первый абзац выглядит хорошо, автор понятно выделил основные идеи и аргументы доклада о различных проблемах потоков. Мне понравилось, что помимо общего обзора присутствуют конкретный способ решения. Оценка идей выглядит кратко, но по делу. Оценка хоть и выглядит немого поверхностной, но в целом она достаточно полная. Мнение автора выглядит крайне интересным. Мне понравилась здравая критика статьи, а так же предложение других идей для решения проблем с потоками. Возможно, Эдвард Ли стремился выделить лишь одну идею, которая понравилась именно ЕМУ, а не рассмотреть спектр решений...  В целом эссе написано очень хорошо, оно логично и его приятно читать.




# Эссе 3

> Эссе (делил знаком > на абзацы и новой строкой отделял мысли для удобного прочтения)

> В своем докладе Эдвард А. Ли подробно рассматривает недостатки потоков как модели параллельного программирования. Он утверждает, что потоки являются слишком низкоуровневой абстракцией, предоставляющей программисту избыточную свободу и приводящей к недетерминированному поведению программ. Ли приводит примеры того, как даже простые многопоточные программы могут вести себя непредсказуемо из-за состояния гонки, взаимоблокировок и других проблем синхронизации.

Ли считает, что для написания надежных параллельных программ нужны более высокоуровневые и структурированные модели. В качестве альтернатив он предлагает использовать модель акторов, CSP, потоки данных и функциональные языки. Отдельно Ли выделяет шаблон MapReduce как удачный пример детерминированного параллелизма, работающего над распределенными данными. Также он положительно отзывается о модели Erlang с легковесными процессами и асинхронной передачей сообщений между ними.

Ли призывает к использованию координационных языков, которые бы дополняли существующие языки и позволяли явно описывать архитектуру параллельных вычислений. Такие языки должны поддерживать компонентную модель, где параллелизм достигается за счет потоков данных между независимыми компонентами. При этом нужно минимизировать использование недетерминированности и делать ее явной с помощью специальных языковых конструкций.

> Мнение автора:
Эдвард А. Ли справедливо критикует потоки как слишком примитивный и сложный в использовании механизм параллелизма. Его идеи по использованию более высокоуровневых моделей, таких как акторы и потоки данных, заслуживают внимания. Явное описание архитектуры параллельных вычислений с помощью координационных языков также выглядит многообещающе.

Однако некоторые рассуждения Ли о недетерминированности выглядят надуманными и оторванными от практики. Например, наличие состояний гонки и взаимоблокировок часто говорит о фундаментальных проблемах в логике программы, которые нельзя исправить просто сменой модели параллелизма. Если разработчик не продумал как следует синхронизацию, то он получит некорректную программу независимо от используемых абстракций.

Ли также радикально заявляет, что от потоков нужно отказаться совсем. Но иногда низкоуровневый контроль над потоками нужен для оптимизации производительности и эффективного использования ресурсов. Кроме того, современные языки предлагают различные инструменты для борьбы с типичными проблемами многопоточности, такие как транзакционная память, неизменяемые структуры данных, сообщения вместо разделяемого состояния и т.д.

> Мое мнение:
Я согласен с автором, что параллельное программирование на основе потоков - сложная задача, требующая аккуратности и глубокого понимания тонкостей модели. Явные гарантии используемых средств параллелизма должны помочь писать более надежные многопоточные программы.

С другой стороны, автор слишком увлекается борьбой с недетерминированностью. На практике многие ошибки параллелизма происходят из-за некорректной работы с блокировками и разделяемым состоянием, а не от недетерминированности как таковой. Если разработчик изначально выбрал неподходящую модель синхронизации, то детерминированные потоки данных ему не помогут.

Тем не менее, высокоуровневые модели параллелизма - это шаг в правильном направлении. Акторы, функциональные абстракции, передача сообщений и транзакционная память упрощают написание корректного параллельного кода. Если их дополнить языковыми инструментами для контроля доступа и обеспечения инвариантов, то многих проблем можно избежать в принципе.

При этом не стоит полностью отказываться от потоков. Даже в функциональных языках (Haskell) и системах на акторах (Erlang, Pony) потоки так или иначе используются под капотом. Важно найти баланс: большую часть параллельной логики описывать на высоком уровне, а низкоуровневые потоки применять только для точечной оптимизации, когда это реально необходимо.
-------------------------
Ревью
Место 1
Первый абзац хорошо описывает основные идеи статьи, мысли хорошо разделены. Мне понравилось, что имеется перечисление различных технологий и способов решений с понятными описаниями. Оценка мыслей и аргументов статьи Эдварда Ли выглядит логично, мне понравилась оправданная критика доклада, его аргументы звучат вполне убедительно. Хоть автор и согласен со статьей, он указывает на "логические" несостыковки, что хорошо подчеркивает оценку идей. Личные рассуждения автора эссе выглядят понятно и хорошо согласуются с оценкой статьи. Здесь как раз и развивается мысль о несостыковках и различных подходах к решению проблем, что явно выделяет мнение автора. В целом эссе хорошо структурировано и его приятно читать, автор не только излагает идеи статьи, но и явно высказывает свое мнение, что мне и понравилось.