Для чего нужны NX (No execute), DEP (Data Execution Prevention) и ASLR (Adress Space Layout Randomization) и какую роль они играют при разработке разлчных систем.


NX, DEP, ASLR - механизмы защиты компьютерных систем\приложений для защиты от атак, связаных с манипулированию памятью.


NX - предотвращение выполнения кода в определенных участках памяти (эти участки не должны содержать исполняемый код.

Работает с помощуью установки NX бита на странице памяти. Процессор не должен выполнять код, находящийся на этих страницах памяти.
Защищает от атак, связанных с переполнением буфера (вставка кода в надежде, что он выполнится), от доступа к защищенной памяти и\или просмотру содержимого страниц.


DEP - более общий термин для защиты от исполнениня кода из различных областей (включает в себя NX). Может быть как аппаратным, так и программным. Аппаратная реализация работает схоже с NX. Программная моежт включаеть в себя проверки на уровне системы (проверка структур данных, проверка текущей страницы, ...)


ASLR - рандомизация расположения важных областей памяти (данные, код, библиотеки), чтобы злоумышленник не смог найти интересующую его информацию с помощью перебора. При каждом обращении к какой то библиотеке\данным адреса случайным образом перемешиваются. Это защитит так же от исполнения вредоносного кода путем запуска уже находящихся в памяти страниц кода.
Время, требуемое на перебор вырастает до огромных значений, при этом его нужно запускать каждый раз после обращения, ведь адреса рандомизируются.


Роль:
1) Повышение общей безопасности: использование этих механизмов усложняет взлом с помощью воздействия на память, переполнения.
2) Повышение надежности: эти механизмы помогут защититься не только от злоумышленников, но и например от сбоев в системе. Если процессор попытается выполнить код с некорректной страницы из за сбоя (например указателя памяти), он не сможет это сделать из за NX.
3) ASLR в частности усложняет взлом с помощью ROP (Return Oriented Programming), ведь эта техника опирается на известность расположения исполняемых модулей.
